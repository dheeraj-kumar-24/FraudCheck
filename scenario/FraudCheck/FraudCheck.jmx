<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="FDS Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_HOST" elementType="Argument">
            <stringProp name="Argument.name">APP_HOST</stringProp>
            <stringProp name="Argument.value">${__P(host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APP_PORT" elementType="Argument">
            <stringProp name="Argument.name">APP_PORT</stringProp>
            <stringProp name="Argument.value">${__P(port,8081)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_BASIC_CHECK" elementType="Argument">
            <stringProp name="Argument.name">PATH_BASIC_CHECK</stringProp>
            <stringProp name="Argument.value">fraudCheck</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration_second" elementType="Argument">
            <stringProp name="Argument.name">duration_second</stringProp>
            <stringProp name="Argument.value">${__P(duration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="load_msg_sec" elementType="Argument">
            <stringProp name="Argument.name">load_msg_sec</stringProp>
            <stringProp name="Argument.value">${__P(load,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cif_id_min" elementType="Argument">
            <stringProp name="Argument.name">cif_id_min</stringProp>
            <stringProp name="Argument.value">${__P(cifmin,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cif_id_max" elementType="Argument">
            <stringProp name="Argument.name">cif_id_max</stringProp>
            <stringProp name="Argument.value">${__P(cifmax,2500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="no_threads" elementType="Argument">
            <stringProp name="Argument.name">no_threads</stringProp>
            <stringProp name="Argument.value">${__P(nothreads,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">${__P(path,/Users/dheerajkumar/Desktop/finacle-aerospike-poc/test/csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampup" elementType="Argument">
            <stringProp name="Argument.name">rampup</stringProp>
            <stringProp name="Argument.value">${__P(rampup,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MerchantPaymentTest" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${no_threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1373789594000</longProp>
        <longProp name="ThreadGroup.end_time">1373789594000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration_second}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Virtual Users Running Scenario 1. 
Make test last 1 minute (see Scheduler)</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MerchantPayment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;bankId&quot;: &quot;${bankId}&quot;,&#xd;
  &quot;id&quot;: &quot;01/${tranIdCounterValue}&quot;,&#xd;
  &quot;solId&quot;: &quot;${solId}&quot;,&#xd;
  &quot;ipAddr&quot;: &quot;${ipAddr}&quot;,&#xd;
  &quot;device&quot;: &quot;${cifIdCounter}/${DeviceCounterValue}&quot;,&#xd;
  &quot;product&quot;: &quot;${product}&quot;,&#xd;
  &quot;channel&quot;: &quot;${channel}&quot;,&#xd;
  &quot;type&quot;: &quot;${type}&quot;,&#xd;
  &quot;cardNo&quot;: &quot;${cifIdCounter}${CardCounterValue}&quot;,&#xd;
  &quot;tranAmt&quot;: &quot;${tranAmt}&quot;,&#xd;
  &quot;tranCurrency&quot;: &quot;${tranCrncy}&quot;,&#xd;
  &quot;refAmt&quot;: &quot;${refAmt}&quot;,&#xd;
  &quot;refCurrency&quot;: &quot;${refCrncy}&quot;,&#xd;
  &quot;drAccount&quot;: &quot;${cifIdCounter}/${DrAccountCounterValue}&quot;,&#xd;
  &quot;gps&quot;: &quot;${gps}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;state&quot;: &quot;${state}&quot;,&#xd;
  &quot;country&quot;: &quot;${country}&quot;,&#xd;
  &quot;merchName&quot;: &quot;${merchName}&quot;,&#xd;
  &quot;mccCode&quot;: &quot;${MCCCode}&quot;,&#xd;
  &quot;cardTrmId&quot;: &quot;0001&quot;,&#xd;
  &quot;cardId&quot;: &quot;${cifIdCounter}${CardCounterValue}&quot;,&#xd;
  &quot;rmks&quot;: &quot;${rmks}&quot;,&#xd;
  &quot;purposeCode&quot;: &quot;${purposeCode}&quot;,&#xd;
  &quot;lcldtd&quot;: &quot;${lcldtd}&quot;,&#xd;
  &quot;lcltime&quot;: &quot;${lcltime}&quot;,&#xd;
  &quot;pgInd&quot;: &quot;${pgInd}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${APP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${APP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH_BASIC_CHECK}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">MerchantPay.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="tranIdCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">0</stringProp>
        <stringProp name="CounterConfig.end">1000</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">tranIdCounterValue</stringProp>
        <stringProp name="CounterConfig.format">0000</stringProp>
        <boolProp name="CounterConfig.per_user">true</boolProp>
        <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="CardCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">6</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">CardCounterValue</stringProp>
        <stringProp name="CounterConfig.format">000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="DrAccountCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">5</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">DrAccountCounterValue</stringProp>
        <stringProp name="CounterConfig.format">0000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FundsTransferTest" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${no_threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1373789594000</longProp>
        <longProp name="ThreadGroup.end_time">1373789594000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration_second}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Virtual Users Running Scenario 1. 
Make test last 1 minute (see Scheduler)</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">FundsTransfer.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FundsTransfer" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;bankId&quot;: &quot;${bankId}&quot;,&#xd;
  &quot;id&quot;: &quot;01/${tranIdCounterValue}&quot;,&#xd;
  &quot;solId&quot;: &quot;${solId}&quot;,&#xd;
  &quot;ipAddr&quot;: &quot;${ipAddr}&quot;,&#xd;
  &quot;product&quot;: &quot;UPI&quot;,&#xd;
  &quot;device&quot;: &quot;${cifIdCounter}/${DeviceCounterValue}&quot;,&#xd;
  &quot;channel&quot;: &quot;${channel}&quot;,&#xd;
  &quot;type&quot;: &quot;XFER&quot;,&#xd;
  &quot;tranAmt&quot;: &quot;${tranAmt}&quot;,&#xd;
  &quot;tranCrncy&quot;: &quot;${tranCrncy}&quot;,&#xd;
  &quot;refAmt&quot;: &quot;${refAmt}&quot;,&#xd;
  &quot;refCrncy&quot;: &quot;${refCrncy}&quot;,&#xd;
  &quot;drAccount&quot;: &quot;${cifIdCounter}/${DrAccountCounterValue}&quot;,&#xd;
  &quot;gps&quot;: &quot;${gps}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;state&quot;: &quot;${state}&quot;,&#xd;
  &quot;country&quot;: &quot;${country}&quot;,&#xd;
  &quot;beneId&quot;: &quot;${cifIdCounter}/${DrAccountCounterValue}/${DrAccountCounterValue}&quot;,&#xd;
  &quot;beneName&quot;: &quot;${beneName}&quot;,&#xd;
  &quot;crAcct&quot;: &quot;${cifIdCounter}/${CrAccountCounterValue}/${CrAccountCounterValue}&quot;,&#xd;
  &quot;rmks&quot;: &quot;${rmks}&quot;,&#xd;
  &quot;lcldtd&quot;: &quot;${lcldtd}&quot;,&#xd;
  &quot;lcltime&quot;: &quot;${lcltime}&quot;,&#xd;
  &quot;pgInd&quot;: &quot;${pgInd}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${APP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${APP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH_BASIC_CHECK}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="CrAccountCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">5</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">CrAccountCounterValue</stringProp>
        <stringProp name="CounterConfig.format">0000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CashWithdrawalTest" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${no_threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1373789594000</longProp>
        <longProp name="ThreadGroup.end_time">1373789594000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration_second}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Virtual Users Running Scenario 1. 
Make test last 1 minute (see Scheduler)</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">ATMCashWd.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CashWithdrawal" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;bankId&quot;: &quot;${bankId}&quot;,&#xd;
  &quot;id&quot;: &quot;01/${tranIdCounterValue}&quot;,&#xd;
  &quot;solId&quot;: &quot;${solId}&quot;,&#xd;
  &quot;ipAddr&quot;: &quot;${ipAddr}&quot;,&#xd;
  &quot;device&quot;: &quot;${device}&quot;,&#xd;
  &quot;product&quot;: &quot;ATM&quot;,&#xd;
  &quot;channel&quot;: &quot;ATM&quot;,&#xd;
  &quot;type&quot;: &quot;CWD&quot;,&#xd;
  &quot;cardNo&quot;: &quot;${cifIdCounter}${CardCounterValue}&quot;,&#xd;
  &quot;tranAmt&quot;: &quot;${tranAmt}&quot;,&#xd;
  &quot;tranCrncy&quot;: &quot;${tranCrncy}&quot;,&#xd;
  &quot;refAmt&quot;: &quot;${refAmt}&quot;,&#xd;
  &quot;refCrncy&quot;: &quot;${refCrncy}&quot;,&#xd;
  &quot;drAccount&quot;: &quot;${cifIdCounter}/${DrAccountCounterValue}&quot;,&#xd;
  &quot;gps&quot;: &quot;${gps}&quot;,&#xd;
  &quot;city&quot;: &quot;${city}&quot;,&#xd;
  &quot;state&quot;: &quot;${state}&quot;,&#xd;
  &quot;country&quot;: &quot;${country}&quot;,&#xd;
  &quot;cardTrmId&quot;: &quot;ATM${ATMIdCounterValue}&quot;,&#xd;
  &quot;cardId&quot;: &quot;${cifIdCounter}${CardCounterValue}&quot;,&#xd;
  &quot;rmks&quot;: &quot;${rmks}&quot;,&#xd;
  &quot;lcldtd&quot;: &quot;${lcldtd}&quot;,&#xd;
  &quot;lcltime&quot;: &quot;${lcltime}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${APP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${APP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH_BASIC_CHECK}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="ATMIdCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">9999</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">ATMIdCounterValue</stringProp>
        <stringProp name="CounterConfig.format">0000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/run${__time}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="cifIdCounter" enabled="true">
        <stringProp name="CounterConfig.start">${__jexl3(${cif_id_min})}</stringProp>
        <stringProp name="CounterConfig.end">${__jexl3(${cif_id_max})}</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">cifIdCounter</stringProp>
        <stringProp name="CounterConfig.format">0000000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
        <stringProp name="TestPlan.comments">Counter for the number Customers</stringProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="DeviceCounterValue" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">5</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">DeviceCounterValue</stringProp>
        <stringProp name="CounterConfig.format">0000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
        <stringProp name="throughput">${__jexl3(${load_msg_sec}*60)}</stringProp>
        <intProp name="calcMode">1</intProp>
      </ConstantThroughputTimer>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="influxdb" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://influxdb:8086/write?db=telegraf</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">application name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
